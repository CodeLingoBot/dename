// Code generated by protoc-gen-go.
// source: message.proto
// DO NOT EDIT!

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	Profile
	SignedProfileOperation
	SignedServerMessage
	BackendMessage
	ClientMessage
	ClientReply
*/

package protocol

import proto "code.google.com/p/goprotobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type ClientReply_Status int32

const (
	ClientReply_OK                    ClientReply_Status = 0
	ClientReply_REGISTRATION_DISABLED ClientReply_Status = 1
	ClientReply_INVITE_INVALID        ClientReply_Status = 2
	ClientReply_INVITE_USED           ClientReply_Status = 3
	ClientReply_NOT_AUTHORIZED        ClientReply_Status = 4
)

var ClientReply_Status_name = map[int32]string{
	0: "OK",
	1: "REGISTRATION_DISABLED",
	2: "INVITE_INVALID",
	3: "INVITE_USED",
	4: "NOT_AUTHORIZED",
}
var ClientReply_Status_value = map[string]int32{
	"OK": 0,
	"REGISTRATION_DISABLED": 1,
	"INVITE_INVALID":        2,
	"INVITE_USED":           3,
	"NOT_AUTHORIZED":        4,
}

func (x ClientReply_Status) Enum() *ClientReply_Status {
	p := new(ClientReply_Status)
	*p = x
	return p
}
func (x ClientReply_Status) String() string {
	return proto.EnumName(ClientReply_Status_name, int32(x))
}
func (x *ClientReply_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ClientReply_Status_value, data, "ClientReply_Status")
	if err != nil {
		return err
	}
	*x = ClientReply_Status(value)
	return nil
}

type Profile struct {
	SignatureKey     *Profile_PublicKey        `protobuf:"bytes,1,req" json:"SignatureKey,omitempty"`
	ExpirationTime   *uint64                   `protobuf:"varint,2,req" json:"ExpirationTime,omitempty"`
	Version          *uint64                   `protobuf:"varint,3,opt,def=0" json:"Version,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *Profile) Reset()         { *m = Profile{} }
func (m *Profile) String() string { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()    {}

var extRange_Profile = []proto.ExtensionRange{
	{4, 536870911},
}

func (*Profile) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_Profile
}
func (m *Profile) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

const Default_Profile_Version uint64 = 0

func (m *Profile) GetSignatureKey() *Profile_PublicKey {
	if m != nil {
		return m.SignatureKey
	}
	return nil
}

func (m *Profile) GetExpirationTime() uint64 {
	if m != nil && m.ExpirationTime != nil {
		return *m.ExpirationTime
	}
	return 0
}

func (m *Profile) GetVersion() uint64 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return Default_Profile_Version
}

type Profile_PublicKey struct {
	Ed25519          []byte `protobuf:"bytes,1,opt,name=ed25519" json:"ed25519,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Profile_PublicKey) Reset()         { *m = Profile_PublicKey{} }
func (m *Profile_PublicKey) String() string { return proto.CompactTextString(m) }
func (*Profile_PublicKey) ProtoMessage()    {}

func (m *Profile_PublicKey) GetEd25519() []byte {
	if m != nil {
		return m.Ed25519
	}
	return nil
}

type SignedProfileOperation struct {
	ProfileOperation    []byte `protobuf:"bytes,1,req" json:"ProfileOperation,omitempty"`
	NewProfileSignature []byte `protobuf:"bytes,2,req" json:"NewProfileSignature,omitempty"`
	OldProfileSignature []byte `protobuf:"bytes,3,opt" json:"OldProfileSignature,omitempty"`
	XXX_unrecognized    []byte `json:"-"`
}

func (m *SignedProfileOperation) Reset()         { *m = SignedProfileOperation{} }
func (m *SignedProfileOperation) String() string { return proto.CompactTextString(m) }
func (*SignedProfileOperation) ProtoMessage()    {}

func (m *SignedProfileOperation) GetProfileOperation() []byte {
	if m != nil {
		return m.ProfileOperation
	}
	return nil
}

func (m *SignedProfileOperation) GetNewProfileSignature() []byte {
	if m != nil {
		return m.NewProfileSignature
	}
	return nil
}

func (m *SignedProfileOperation) GetOldProfileSignature() []byte {
	if m != nil {
		return m.OldProfileSignature
	}
	return nil
}

type SignedProfileOperation_ProfileOperationT struct {
	Name             []byte `protobuf:"bytes,1,req" json:"Name,omitempty"`
	NewProfile       []byte `protobuf:"bytes,2,req" json:"NewProfile,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SignedProfileOperation_ProfileOperationT) Reset() {
	*m = SignedProfileOperation_ProfileOperationT{}
}
func (m *SignedProfileOperation_ProfileOperationT) String() string { return proto.CompactTextString(m) }
func (*SignedProfileOperation_ProfileOperationT) ProtoMessage()    {}

func (m *SignedProfileOperation_ProfileOperationT) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *SignedProfileOperation_ProfileOperationT) GetNewProfile() []byte {
	if m != nil {
		return m.NewProfile
	}
	return nil
}

type SignedServerMessage struct {
	Message          []byte `protobuf:"bytes,1,req" json:"Message,omitempty"`
	Signature        []byte `protobuf:"bytes,2,req" json:"Signature,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SignedServerMessage) Reset()         { *m = SignedServerMessage{} }
func (m *SignedServerMessage) String() string { return proto.CompactTextString(m) }
func (*SignedServerMessage) ProtoMessage()    {}

func (m *SignedServerMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SignedServerMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type SignedServerMessage_ServerMessage struct {
	HashOfOperations []byte  `protobuf:"bytes,1,opt" json:"HashOfOperations,omitempty"`
	HashOfHashes     []byte  `protobuf:"bytes,2,opt" json:"HashOfHashes,omitempty"`
	Operations       []byte  `protobuf:"bytes,3,opt" json:"Operations,omitempty"`
	HashOfState      []byte  `protobuf:"bytes,4,opt" json:"HashOfState,omitempty"`
	Round            *uint64 `protobuf:"varint,10,req,name=round" json:"round,omitempty"`
	Server           *uint64 `protobuf:"varint,11,req,name=server" json:"server,omitempty"`
	Time             *uint64 `protobuf:"varint,12,req,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SignedServerMessage_ServerMessage) Reset()         { *m = SignedServerMessage_ServerMessage{} }
func (m *SignedServerMessage_ServerMessage) String() string { return proto.CompactTextString(m) }
func (*SignedServerMessage_ServerMessage) ProtoMessage()    {}

func (m *SignedServerMessage_ServerMessage) GetHashOfOperations() []byte {
	if m != nil {
		return m.HashOfOperations
	}
	return nil
}

func (m *SignedServerMessage_ServerMessage) GetHashOfHashes() []byte {
	if m != nil {
		return m.HashOfHashes
	}
	return nil
}

func (m *SignedServerMessage_ServerMessage) GetOperations() []byte {
	if m != nil {
		return m.Operations
	}
	return nil
}

func (m *SignedServerMessage_ServerMessage) GetHashOfState() []byte {
	if m != nil {
		return m.HashOfState
	}
	return nil
}

func (m *SignedServerMessage_ServerMessage) GetRound() uint64 {
	if m != nil && m.Round != nil {
		return *m.Round
	}
	return 0
}

func (m *SignedServerMessage_ServerMessage) GetServer() uint64 {
	if m != nil && m.Server != nil {
		return *m.Server
	}
	return 0
}

func (m *SignedServerMessage_ServerMessage) GetTime() uint64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

type SignedServerMessage_ServerMessage_OperationsT struct {
	Seed              []byte                    `protobuf:"bytes,1,req" json:"Seed,omitempty"`
	Time              *uint64                   `protobuf:"varint,2,req,name=time" json:"time,omitempty"`
	ProfileOperations []*SignedProfileOperation `protobuf:"bytes,3,rep" json:"ProfileOperations,omitempty"`
	XXX_unrecognized  []byte                    `json:"-"`
}

func (m *SignedServerMessage_ServerMessage_OperationsT) Reset() {
	*m = SignedServerMessage_ServerMessage_OperationsT{}
}
func (m *SignedServerMessage_ServerMessage_OperationsT) String() string {
	return proto.CompactTextString(m)
}
func (*SignedServerMessage_ServerMessage_OperationsT) ProtoMessage() {}

func (m *SignedServerMessage_ServerMessage_OperationsT) GetSeed() []byte {
	if m != nil {
		return m.Seed
	}
	return nil
}

func (m *SignedServerMessage_ServerMessage_OperationsT) GetTime() uint64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *SignedServerMessage_ServerMessage_OperationsT) GetProfileOperations() []*SignedProfileOperation {
	if m != nil {
		return m.ProfileOperations
	}
	return nil
}

type BackendMessage struct {
	SignedServerMessage *SignedServerMessage      `protobuf:"bytes,1,opt" json:"SignedServerMessage,omitempty"`
	Download            *BackendMessage_MessageID `protobuf:"bytes,2,opt" json:"Download,omitempty"`
	Subscribe           *bool                     `protobuf:"varint,3,opt,def=0" json:"Subscribe,omitempty"`
	XXX_unrecognized    []byte                    `json:"-"`
}

func (m *BackendMessage) Reset()         { *m = BackendMessage{} }
func (m *BackendMessage) String() string { return proto.CompactTextString(m) }
func (*BackendMessage) ProtoMessage()    {}

const Default_BackendMessage_Subscribe bool = false

func (m *BackendMessage) GetSignedServerMessage() *SignedServerMessage {
	if m != nil {
		return m.SignedServerMessage
	}
	return nil
}

func (m *BackendMessage) GetDownload() *BackendMessage_MessageID {
	if m != nil {
		return m.Download
	}
	return nil
}

func (m *BackendMessage) GetSubscribe() bool {
	if m != nil && m.Subscribe != nil {
		return *m.Subscribe
	}
	return Default_BackendMessage_Subscribe
}

type BackendMessage_MessageID struct {
	Round            *uint64  `protobuf:"varint,1,req,name=round" json:"round,omitempty"`
	Phase            []uint64 `protobuf:"varint,2,rep,packed,name=phase" json:"phase,omitempty"`
	Server           []uint64 `protobuf:"varint,3,rep,packed,name=server" json:"server,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *BackendMessage_MessageID) Reset()         { *m = BackendMessage_MessageID{} }
func (m *BackendMessage_MessageID) String() string { return proto.CompactTextString(m) }
func (*BackendMessage_MessageID) ProtoMessage()    {}

func (m *BackendMessage_MessageID) GetRound() uint64 {
	if m != nil && m.Round != nil {
		return *m.Round
	}
	return 0
}

func (m *BackendMessage_MessageID) GetPhase() []uint64 {
	if m != nil {
		return m.Phase
	}
	return nil
}

func (m *BackendMessage_MessageID) GetServer() []uint64 {
	if m != nil {
		return m.Server
	}
	return nil
}

type ClientMessage struct {
	PeekState        *bool                   `protobuf:"varint,1,opt" json:"PeekState,omitempty"`
	ResolveName      []byte                  `protobuf:"bytes,2,opt" json:"ResolveName,omitempty"`
	ModifyProfile    *SignedProfileOperation `protobuf:"bytes,3,opt" json:"ModifyProfile,omitempty"`
	InviteCode       []byte                  `protobuf:"bytes,4,opt" json:"InviteCode,omitempty"`
	PadReplyTo       *uint64                 `protobuf:"varint,11,opt" json:"PadReplyTo,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *ClientMessage) Reset()         { *m = ClientMessage{} }
func (m *ClientMessage) String() string { return proto.CompactTextString(m) }
func (*ClientMessage) ProtoMessage()    {}

func (m *ClientMessage) GetPeekState() bool {
	if m != nil && m.PeekState != nil {
		return *m.PeekState
	}
	return false
}

func (m *ClientMessage) GetResolveName() []byte {
	if m != nil {
		return m.ResolveName
	}
	return nil
}

func (m *ClientMessage) GetModifyProfile() *SignedProfileOperation {
	if m != nil {
		return m.ModifyProfile
	}
	return nil
}

func (m *ClientMessage) GetInviteCode() []byte {
	if m != nil {
		return m.InviteCode
	}
	return nil
}

func (m *ClientMessage) GetPadReplyTo() uint64 {
	if m != nil && m.PadReplyTo != nil {
		return *m.PadReplyTo
	}
	return 0
}

type ClientReply struct {
	StateConfirmations []*SignedServerMessage       `protobuf:"bytes,1,rep" json:"StateConfirmations,omitempty"`
	LookupNodes        []*ClientReply_MerklemapNode `protobuf:"bytes,2,rep" json:"LookupNodes,omitempty"`
	Status             *ClientReply_Status          `protobuf:"varint,3,opt,name=status,enum=protocol.ClientReply_Status,def=0" json:"status,omitempty"`
	XXX_unrecognized   []byte                       `json:"-"`
}

func (m *ClientReply) Reset()         { *m = ClientReply{} }
func (m *ClientReply) String() string { return proto.CompactTextString(m) }
func (*ClientReply) ProtoMessage()    {}

const Default_ClientReply_Status ClientReply_Status = ClientReply_OK

func (m *ClientReply) GetStateConfirmations() []*SignedServerMessage {
	if m != nil {
		return m.StateConfirmations
	}
	return nil
}

func (m *ClientReply) GetLookupNodes() []*ClientReply_MerklemapNode {
	if m != nil {
		return m.LookupNodes
	}
	return nil
}

func (m *ClientReply) GetStatus() ClientReply_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Default_ClientReply_Status
}

type ClientReply_MerklemapNode struct {
	SubstringBitsInLastByte *uint64 `protobuf:"varint,1,req" json:"SubstringBitsInLastByte,omitempty"`
	Substring               []byte  `protobuf:"bytes,2,req" json:"Substring,omitempty"`
	// exactly one of {LeftChildHash, RightChildHash, Value} must be present in a message on wire, all are used for hashing
	LeftChildHash    []byte `protobuf:"bytes,3,opt" json:"LeftChildHash,omitempty"`
	RightChildHash   []byte `protobuf:"bytes,4,opt" json:"RightChildHash,omitempty"`
	Value            []byte `protobuf:"bytes,5,opt" json:"Value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ClientReply_MerklemapNode) Reset()         { *m = ClientReply_MerklemapNode{} }
func (m *ClientReply_MerklemapNode) String() string { return proto.CompactTextString(m) }
func (*ClientReply_MerklemapNode) ProtoMessage()    {}

func (m *ClientReply_MerklemapNode) GetSubstringBitsInLastByte() uint64 {
	if m != nil && m.SubstringBitsInLastByte != nil {
		return *m.SubstringBitsInLastByte
	}
	return 0
}

func (m *ClientReply_MerklemapNode) GetSubstring() []byte {
	if m != nil {
		return m.Substring
	}
	return nil
}

func (m *ClientReply_MerklemapNode) GetLeftChildHash() []byte {
	if m != nil {
		return m.LeftChildHash
	}
	return nil
}

func (m *ClientReply_MerklemapNode) GetRightChildHash() []byte {
	if m != nil {
		return m.RightChildHash
	}
	return nil
}

func (m *ClientReply_MerklemapNode) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterEnum("protocol.ClientReply_Status", ClientReply_Status_name, ClientReply_Status_value)
}
